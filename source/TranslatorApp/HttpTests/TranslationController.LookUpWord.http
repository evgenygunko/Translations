### Translate "såsom" from Danish to Russian

POST {{HostAddress}}/api/LookUpWord?code={{code}}
Content-Type: application/json

{
    "Text": "såsom",
    "SourceLanguage": "Danish",
    "DestinationLanguage": "Russian",
    "Version": "1"
}

> {%

  // Assert status code
  client.test('When sending a word for translation, we expect to get json back', () => {
    client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.definitions[0]["headword"]["english"].length > 0);
    client.assert(response.body.definitions[0]["headword"]["russian"].length > 0);

    client.assert(response.body.definitions[0].contexts[0].meanings[0]["translation"].length > 0);
    client.assert(response.body.definitions[0].contexts[0].meanings[1]["translation"].length > 0);
  });
%}

### Translate "https://ordnet.dk/ddo/ordbog?select=bestemme&query=bestemt" from Danish to Russian

POST {{HostAddress}}/api/LookUpWord?code={{code}}
Content-Type: application/json

{
    "Text": "https://ordnet.dk/ddo/ordbog?select=bestemme&query=bestemt",
    "SourceLanguage": "Danish",
    "DestinationLanguage": "Russian",
    "Version": "1"
}

> {%

  // Assert status code
  client.test('When sending a word for translation, we expect to get json back', () => {
    client.assert(response.status === 200, "Response status is 200");
    client.assert(response.body.definitions[0]["headword"]["english"].length > 0);
    client.assert(response.body.definitions[0]["headword"]["russian"].length > 0);

    client.assert(response.body.definitions[0].contexts[0].meanings[0]["translation"].length > 0);
    client.assert(response.body.definitions[0].contexts[0].meanings[1]["translation"].length > 0);
  });
%}


### Translate "afeitar" from Spanish to Russian

POST {{HostAddress}}/api/LookUpWord?code={{code}}
Content-Type: application/json

{
    "Text": "afeitar",
    "SourceLanguage": "Spanish",
    "DestinationLanguage": "Russian",
    "Version": "1"
}

> {%

  // Assert status code
  client.test('When sending a word for translation, we expect to get json back', () => {
    client.assert(response.status === 200, "Response status is 200");

    client.assert(response.body.definitions[0]["headword"]["english"].length > 0);
    client.assert(response.body.definitions[0]["headword"]["russian"].length > 0);
    client.assert(response.body.definitions[0].contexts[0].meanings[0]["translation"].length > 0);

    client.assert(response.body.definitions[1]["headword"]["english"].length > 0);
    client.assert(response.body.definitions[1]["headword"]["russian"].length > 0);
    client.assert(response.body.definitions[1].contexts[0].meanings[0]["translation"].length > 0);
  });
%}


### Translate "coche" from Spanish to Russian

POST {{HostAddress}}/api/LookUpWord?code={{code}}
Content-Type: application/json

{
    "Text": "coche",
    "SourceLanguage": "Spanish",
    "DestinationLanguage": "Russian",
    "Version": "1"
}

> {%

  // Assert status code
  client.test('When sending a word for translation, we expect to get json back', () => {
    client.assert(response.status === 200, "Response status is 200");

    client.assert(response.body.definitions[0]["headword"]["english"].length > 0);
    client.assert(response.body.definitions[0]["headword"]["russian"].length > 0);

    client.assert(response.body.definitions[0].contexts[0].meanings[0]["translation"].length > 0);
    client.assert(response.body.definitions[0].contexts[1].meanings[0]["translation"].length > 0);
    client.assert(response.body.definitions[0].contexts[2].meanings[0]["translation"].length > 0);
    client.assert(response.body.definitions[0].contexts[3].meanings[0]["translation"].length > 0);
  });
%}



### BadRequest - Several required fields are null

POST {{HostAddress}}/api/LookUpWord?code={{code}}
Content-Type: application/json

{
    "Text": "coche",
    "SourceLanguage": null,
    "DestinationLanguage": null,
    "Version": "2"
}

> {%

  // Assert status code
  client.test('When several required fields are null, we expect to get an error', () => {
    client.assert(response.status === 400, "Response status is BadRequest");
    client.assert(response.body.title === "One or more validation errors occurred.")
  });
%}